#!/usr/bin/env nu
#
# This scripts manages zig & zls installation using nushell
# 

# Defines how old release we want to access
# Current value: 78wk <=> 1.5years
let past_weeks = 78wk

let zigup_version = "0.1.0"

# By default shows help
# Descripts how to use this script
def main [] {
  main help
}

# This is the first step. To download and update versions.json with available zig versions
# creates/overwrites versions.json, stores zig versions for past_weeks
def "main get-version-list" [] {
  let config_dir = get-config-dir 
  let json = (http get https://ziglang.org/download/index.json)
  let arch_os = get-arch-os
  let keys = ($json | columns)
  mut store = {}
  for key in $keys {
    let date = ($json | get $key | get date | str replace '.' '-' | into datetime)
    let now = (date now | into datetime)
    if (($now - $date) > $past_weeks) {
    } else {
      let arch_val = ($json | get $key | get $arch_os)
      mut version = ($json | get $key | get 'version'?)
      mut key = $key
      if not ($version == null) {
        $key = 'nightly'
      }
      mut ele = {
        date: ($date | format date "%Y-%m-%d"),
        ($arch_os): {
          tarball: $arch_val.tarball,
          shasum: $arch_val.shasum,
          size: $arch_val.size,
        }
      }
      if not ($version == null) {
        $ele = $ele | merge {version: $version}
      }
      $store = $store | merge {$key: $ele}
    }
  }
  $store | to json | save -f $'(get-config-dir)/versions.json'
}

# fetch version if not downloaded then install
def "main install" [version?: string] {
  let version = (main fetch $version)
  let ln_zig = $'(get-config-dir)/zig'
  # update if link exists with new version
  if ($ln_zig | path exists) {
    rm $ln_zig 
  }
  ln -s $'(get-config-dir)/zig-(get-arch-os)-($version)/zig' $ln_zig
  # install zls
  install-zls $version
}

# only download zig version
def "main fetch" [version?: string] {
  mut version = $version
  if ($version == null or ($version | is-empty)) {
    $version = "nightly"
  }
  let install_dir = main get-install-dir
  let versions = (open $'(get-config-dir)/versions.json')
  # TODO: unknown version fails the script
  let version_check = ($versions | get $version)
  if ($version_check == null | ($version_check | is-empty)) {
    print $'Invalid version provided: ($version)'
    exit 1
  }
  let tarball = ($version_check | get (get-arch-os) | get 'tarball')
  let base_path = $'(get-config-dir)/zig-(get-arch-os)-($version)'
  if not ( $'($base_path).tar.xz' | path exists) {
    http get $tarball | save -rpf $'($base_path).tar.xz'
    print $'zig ($version) tar downloaded.'
  } else {
    print $'zig ($version) tar already downloaded.'
    if ($version == nightly) {
      print 'To update nightly build, first update versions.json by calling `zigup get-version-list`'
    }
  }
  if not ( $'($base_path)' | path exists) {
    mkdir $'($base_path)'
    tar xf $'($base_path).tar.xz' -C $'($base_path)' --strip-components 1
    print $'zig ($version) installed.'
  } else {
    print $'zig ($version) already installed.'
  }
  $version
}

def "main nightly" [] {
  let zig_path = $'(get-config-dir)/zig-(get-arch-os)-nightly'
  if ($'($zig_path).tar.xz' | path exists) {
    rm $'($zig_path).tar.xz'
  }
  # remove link
  if ($'(get-config-dir)/zig' | path exists) {
    rm $'(get-config-dir)/zig'
  }
  # remove folder
  if ($zig_path | path exists) {
    rm -r $zig_path
  }
  let zls_path = $'(get-config-dir)/zls-(get-arch-os)-nightly'
  if ($'($zls_path).tar.xz' | path exists) {
    rm $'($zls_path).tar.xz'
  }
  # remove link
  if ($'(get-config-dir)/zls' | path exists) {
    rm $'(get-config-dir)/zls'
  }
  # remove folder
  if ($zls_path | path exists) {
    rm -r $zls_path
  }
  # update nightly version
  main get-version-list
  # install nightly zig + zls
  main install
}


# Displays where the zig instllation dir is
def "main get-install-dir" [] {
  let config_dir = $'(get-config-dir)'
  let install_file = get-install-file $config_dir
  cat $install_file 
}

# Sets the zig instllation dir
def "main set-install-dir" [install_dir?: string] {
  mut install_dir = $install_dir
  if ($install_dir == null or ($install_dir | is-empty)) {
    $install_dir = $'(get-config-dir)'
  }
  let config_dir = get-config-dir
  let install_file = (get-install-file $config_dir)
  $install_dir | save -f $install_file
  cat $install_file
}

# Pass folder path to link zig
def "main ln-zig" [path: string] {
  let zig_path = $'(get-config-dir)/zig'
  if not ($zig_path | path exists) {
    print 'zig binary not found in config dir'
  }
  if ($path | path exists) {
    $'Remove existing zig: ($path)/zig'
  }
  ln -s $zig_path $'($path)/zig'
}

# Pass folder path to link zls
def "main ln-zls" [path: string] {
  let zls_path = $'(get-config-dir)/zls'
  if not ($zls_path | path exists) {
    print 'zls binary not found in config dir'
  }
  if ($path | path exists) {
    $'Remove existing zls: ($path)/zls'
  }
  ln -s $zls_path $'($path)/zls'
}

# List locally installed & available versions
# [# | version | zig | zls]
# [0 | x.x.x   | Yes | Yes]
# [1 | y.y.y   | No  | No ]
def "main list" [] {
  let zig_downloaded = (ls -s $'(get-config-dir)' | get name | parse $'zig-(get-arch-os)-{version}.tar.xz' | get version)
  let zls_downloaded = (ls -s $'(get-config-dir)' | get name | parse $'zls-(get-arch-os)-{version}.tar.xz' | get version)
  let available = (open $'(get-config-dir)/versions.json' | columns | each { |e|
    let  zig_av = if ($zig_downloaded | any {|zd| $zd == $e}) { 'Yes' } else { 'No' }
    let  zls_av = if ($zls_downloaded | any {|zd| $zd == $e}) { 'Yes' } else { 'No' }
    return {version: $e, zig: $zig_av, zls: $zls_av}
  })
  print 'List down all available versions.'
  print 'If a perticular version is downloaded then it is marked as 'Yes' otherwise 'No''
  print $available
}

def "main verify-integrity" [version: string] {
  let expected_shasum = (open $'(get-config-dir)/versions.json') | get $version | get $'(get-arch-os)' | get shasum
  let actual_shasum = (sha256sum $'(get-config-dir)/zig-(get-arch-os)-($version).tar.xz' | parse "{hash} {filename}" | get hash | get 0)
  print $'actual:   ($actual_shasum)'
  let result = if $expected_shasum == $actual_shasum { 'Integrity Passed!' } else { 'Integrity Failed!' }
  print $result
}

# By default shows help. Descripts how to use this script.
def "main help" [] {
  let current_install_dir = (main get-install-dir)
  let setting_file = $'(get-config-dir)/install-dir'
  let builtin_config_dir = $'($env.HOME)/.local/share/nu-zigup'

  print $"
zigup version ($zigup_version)

Download and manage zig compilers & zls LSP.

Common Usage:

  zigup                         By default shows help. Descripts how to use this script.
  zigup get-version-list        This is the first step. To download and update versions.json with available zig versions
  zigup install [VERSION]       Download and set VERSION compiler as default. defaults to nightly
  zigup fetch [VERSION]         Download VERSION compiler. defaults to nightly
  zigup nightly                 Update to the latest nightly build. Removes existing nightly first
  
  zigup get-install-dir         Prints the install directory to stdout, currently only supports linux folder structure
  zigup set-install-dir [PATH]  Set the default install directory, omitting the PATH reverts to the builtin default
                                current default: ($current_install_dir)
                                setting file   : ($setting_file)
                                builtin default: ($builtin_config_dir)
  
  zigup ln-zig PATH             Create a symlink to zig in the specified PATH
  zigup ln-zls PATH             Create a symlink to zls in the specified PATH

Uncommon Usage:

  zigup verify-integrity        Verify shasum & size of downloaded files. TODO: not fully implemented
  zigup list                    List installed compiler versions. TODO: not fully implemented
"
}

## Internal support functionality

# for nightly builds use version 'nightly'
def "install-zls" [version: string] {
  mut nightly_version = $version
  if ($version == 'nightly') {
    # get zig nightly_version
    $nightly_version = (open $'(get-config-dir)/versions.json' | get 'nightly' | get 'version')
  }
  fetch-zls $version $nightly_version
  let ln_zls = $'(get-config-dir)/zls'
  if ($ln_zls | path exists) {
    rm $ln_zls
  }
  ln -s $'($ln_zls)-(get-arch-os)-($version)/zls' $ln_zls
}

# Note: takes 'version' field from .json for nightly
def "fetch-zls" [version: string, nightly_version: string] {
  mut zig_version = $version
  if ($version == nightly) {
    $zig_version = ($nightly_version | str replace '+' '%2B')
  }
  let version_file = http get $'https://releases.zigtools.org/v1/zls/select-version?zig_version=($zig_version)&compatibility=only-runtime'
  let zls_version = $version_file | get 'version'
  let tarball = $version_file | get $'(get-arch-os)' | get tarball
  let base_path = $'(get-config-dir)/zls-(get-arch-os)-($version)'
  if not ($'($base_path).tar.xz' | path exists) {
    http get $tarball | save -rpf $'($base_path).tar.xz'
    print $'zls ($version) tar downloaded.'
  } else {
    print $'zls ($version) tar already downloaded.'
    if ($version == nightly) {
      print 'To update nightly build, first update versions.json by calling `zigup get-version-list`'
    }
  }
  if not ($base_path | path exists) {
    mkdir $'($base_path)'
    tar xf $'($base_path).tar.xz' -C $'($base_path)'
    print $'zls ($version) installed.'
  } else {
    print $'zls ($version) already installed.'
  }
}

# TODO: make config dir based on OS
def "get-config-dir" [] {
  let config_dir = $'($env.HOME)/.local/share/nu-zigup'
  if not ($config_dir | path exists) {
    mkdir -v ($config_dir)
  }
  $config_dir
}

def "get-install-file" [config_dir: string] {
  let install_file = $'($config_dir)/install-dir'
  if not ($install_file | path exists) {
    touch ($install_file)
    $config_dir | save -f $install_file
  }
  $install_file
}

def "get-arch-os" [] {
  let arch = (uname | get machine)
  let os = (uname | get kernel-name | str downcase)
  echo $"($arch)-($os)"
}
